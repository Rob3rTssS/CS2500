(define-struct book [title authors page-count])
(define-struct article [title authors url word-count])
 
; An InfoSource is one of:
; - (make-book String [List-of String] Number)
; - (make-article String [List-of String] String Number)
; and represents either:
; - a book's name, author(s), and number of pages
; - an online article's name, author(s), url, and number of words
 
(define IS-BOOK-1
  (make-book
   "Algorithms to Live By: The Computer Science of Human Decisions"
   (list "Brian Christian" "Tom Griffiths")
   368))
 
(define IS-BOOK-2
  (make-book
   (string-append
    "Hidden Figures: "
    "The American Dream and the Untold Story of the Black Women Who Helped Win the Space Race")
   (list "Margot Lee Shetterly")
   384))
 
(define IS-ARTICLE-1
  (make-article
   "Teach Yourself Programming in Ten Years"
   (list "Peter Norvig")
   "http://norvig.com/21-days.html"
   1790))
 
(define IS-ARTICLE-2
  (make-article
   "Is There a Fix for Impostor Syndrome?"
   (list "Elizabeth Churchill")
  "https://interactions.acm.org/archive/view/may-june-2018/is-there-a-fix-for-impostor-syndrome"
   1655))
 
; infosource-temp : InfoSource -> ?
(define (infosource-temp i)
  (...
   (cond [(book? i) (... (book-title i)
                         (los-temp (book-authors i))
                         (book-page-count i) ...)]
         [(article? i) (... (article-title i)
                            (los-temp (article-authors i))
                            (article-url i)
                            (article-word-count i) ...)])))

; %%%%%%%%%%%%% Exercise 1 %%%%%%%%%%%%%%

; only-articles : [List-of InfoSource] -> [List-of InfoSource]
; produces a list of the online articles in a given list of InfoSources
(check-expect (only-articles article? (list IS-BOOK-1 IS-BOOK-2 IS-ARTICLE-1 IS-ARTICLE-2))
              (list IS-ARTICLE-1 IS-ARTICLE-2))
(define (only-articles lois article?)
  (filter lois article?))


; %%%%%%%%%%%%% Exercise 2 %%%%%%%%%%%%%%  NEED TO MAKE 1 SINGLE LIST INSTEAD

; all-authors : [List-of InfoSource] -> [List-of [List-of String]]
; returns a single list of the all the authors in a list of info sources
;(check-expect (all-authors (list IS-BOOK-1 IS-BOOK-2))
             ; (list "Brian Christian" "Tom Griffiths" "Margot Lee Shetterly"))
(define (all-authors lois)
  (map get-authors lois))

; get-authors: InfoSource -> [List-of String]
; returns authors for in a given InfoSource
(check-expect (get-authors IS-ARTICLE-2) (list "Elizabeth Churchill"))
(check-expect (get-authors IS-BOOK-1) (list "Brian Christian" "Tom Griffiths"))
(define (get-authors is)
  (cond [(book? is) (book-authors is)]
        [(article? is) (article-authors is)]))


; %%%%%%%%%%%%% Exercise 3 %%%%%%%%%%%%%%
; num-books : [List-of Book] -> Number
; counts the number of books in a list of info sources
(check-expect (num-books (list IS-BOOK-1 IS-BOOK-2)) 2)
(check-expect (num-books (list IS-BOOK-1)) 1)
(define (num-books lois)
  (length (filter book? lois)))

; book-list : [List-of InfoSource] -> [List-of Book]
; creates a list of all the books in a given list of InforSources
(check-expect (book-list book? (list IS-BOOK-1 IS-BOOK-2 IS-ARTICLE-1 IS-ARTICLE-2))
              (list IS-BOOK-1 IS-BOOK-2))
(check-expect (book-list book? (list IS-ARTICLE-1 IS-ARTICLE-2)) empty)
(define (book-list lois book?)
  (filter lois book?))


;  %%%%%%%%%%%%% Exercise 4 %%%%%%%%%%%%%%

; multi-author?: [List-of InfoSource] -> Boolean
; does a lost of InfoSources contain a source with more than one authors?
(check-expect (multi-author? (list IS-BOOK-1 IS-BOOK-2 IS-ARTICLE-1 IS-ARTICLE-2)) true)
(check-expect (multi-author? (list IS-BOOK-2)) false)
(define (multi-author? lois)
  (cond [(empty? lois) false]
        [else (or (< 1 (length (get-authors (first lois))))
                  (multi-author? (rest lois)))]))


; ;  %%%%%%%%%%%%% Exercise 5 %%%%%%%%%%%%%%
; 
; ; total-words : [List-of InfoSource] -> Number
; ; computes the total number of words in a list of info sources (book page has 250 words)
; (check-expect (total-words (list IS-BOOK-1 IS-BOOK-2)) 188000)
; (check-expect (total-words (list IS-ARTICLE-1 IS-ARTICLE-2)) 3445)
; (check-expect (total-words (list IS-BOOK-1 IS-ARTICLE-2)) 93655)
; (define (total-words lois)
;   (+  ))
; 
; (define WORDS 250)
; ; book-words : [List-of Book] -> 
; 

  

